#include <fstream>
#include <iostream>
#include <vector>
using namespace std;
int main(int argc, char** argv)
{
    int packets = 10'000;
    int time = 0;
    std::ofstream dev("/dev/ttyACM0");
    std::ifstream read_time("/dev/ttyACM0");
    if(!dev)
    {
        std::cout<<"Error opening file"<<std::endl;
        return 1;
    }
    std::vector<size_t> sizes;
    std::ofstream log("res_new_2.csv", std::ios_base::out | std::ios_base::app);
    if (argc > 1)
    {
        for (size_t i = 1; i < argc; ++i)
        {
            sizes.push_back(strtol(argv[i], nullptr, 10));
            if (errno == ERANGE)
                return 1;
        }
    }
    const char* s =
            "01234567890123456789012345678901234567890123456789012345678901230123456789012345678901234567890123456789012345678901234567890123012345678901234567890123456789012345678901234567890123456789012301234567890123456789012345678901234567890123456789012345678901230123456789012345678901234567890123456789012345678901234567890123012345678901234567890123456789012345678901234567890123456789012301234567890123456789012345678901234567890123456789012345678901230123456789012345678901234567890123456789012345678901234567890123012345678901234567890123456789012345678901234567890123456789012301234567890123456789012345678901234567890123456789012345678901230123456789012345678901234567890123456789012345678901234567890123012345678901234567890123456789012345678901234567890123456789012301234567890123456789012345678901234567890123456789012345678901230123456789012345678901234567890123456789012345678901234567890123012345678901234567890123456789012345678901234567890123456789012301234567890123456789012345678901234567890123456789012345678901230123456789012345678901234567890123456789012345678901234567890123012345678901234567890123456789012345678901234567890123456789012301234567890123456789012345678901234567890123456789012345678901230123456789012345678901234567890123456789012345678901234567890123012345678901234567890123456789012345678901234567890123456789012301234567890123456789012345678901234567890123456789012345678901230123456789012345678901234567890123456789012345678901234567890123012345678901234567890123456789012345678901234567890123456789012301234567890123456789012345678901234567890123456789012345678901230123456789012345678901234567890123456789012345678901234567890123012345678901234567890123456789012345678901234567890123456789012301234567890123456789012345678901234567890123456789012345678901230123456789012345678901234567890123456789012345678901234567890123012345678901234567890123456789012345678901234567890123456789012301234567890123456789012345678901234567890123456789012345678901230123456789012345678901234567890123456789012345678901234567890123";
    std::string cmd = "212 s";
    for(int j =0; j < 10; ++j)
    for(size_t size_of_packet: sizes)
    {
        cout<<"Begin "<<size_of_packet<<endl;
        int i = 0;
        dev.write(cmd.c_str(), cmd.length());
        dev.flush();
        while (++i < packets)
        {
            dev.write(s, size_of_packet);
            dev.flush();
        }
        dev.write("212 e", cmd.length());
        dev.flush();
        read_time.read(reinterpret_cast<char*>(&time), sizeof(int));
        log << size_of_packet << ", " << static_cast<double>(packets * size_of_packet) * 100'000 / time << ", "
            << static_cast<double>(time) / 100'000 << ", " << packets << std::endl;
    }
}
